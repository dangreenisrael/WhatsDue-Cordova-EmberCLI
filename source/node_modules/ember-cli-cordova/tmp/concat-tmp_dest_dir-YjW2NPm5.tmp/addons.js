define("ember-cli-cordova/initializers/in-app-livereload", 
  ["ember-cli-cordova/utils/redirect","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var redirect = __dependency1__["default"];

    var initialize = function(container, app, config) {
      var url = config.cordova.emberUrl || 'http://localhost:4200';
      return redirect(url);
    };
    __exports__.initialize = initialize;
    __exports__["default"] = {
      name: 'cordova:in-app-livereload',
      initialize: initialize
    };
  });
;define("ember-cli-cordova/utils/redirect", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = function(url) {
      if(window.location.href.indexOf('file://') > -1) {
        window.location.href = url;
      }
    }
  });
;define("ember-cli-cordova/mixins/controllers/nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      nav: {
        title: { },
        leftButton: { },
        rightButton: { }
      },

      actions: {
        leftButton: function() {
          var leftAction = this.get('nav.leftButton.action');

          if(leftAction) {
            leftAction();
          }
        },

        rightButton: function() {
          var rightAction = this.get('nav.rightButton.action');

          if(rightAction) {
            rightAction();
          }
        },

        resetNavBar: function() {
          this.set('nav', {
            title: { },
            leftButton: { },
            rightButton: { }
          });
        }
      }
    });
  });
;define("ember-cli-cordova/mixins/routes/nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      _navController: Ember.computed('nav.controller', function() {
        var name = this.get('nav.controller') || 'application';

        return this.controllerFor(name);
      }),

      afterModel: function(model) {
        this._setDefaults();
        this._setNavOptions(model);
        this._setNavActions();

        return this._super.apply(this, arguments);
      },

      // Since we are using so many nested paths this makes sure they are set to
      // null values
      _setDefaults: function() {
        var ctrl = this.get('_navController');

        if(!ctrl.get('nav')) {
          ctrl.send('resetNavBar');

        } else if(!ctrl.get('nav.title')) {
          ctrl.set('nav.title', {});

        } else if(!ctrl.get('nav.leftButton')) {
          ctrl.set('nav.leftButton', {});

        } else if(!ctrl.get('nav.rightButton')) {
          ctrl.set('nav.rightButton', {});
        }
      },

      _setNavOptions: function(model) {
        var ctrl = this.get('_navController');

        var navOptions = Ember.A([
          'title.text',
          'leftButton.text', 'leftButton.icon',
          'rightButton.text', 'rightButton.icon'
        ]);

        navOptions.forEach(function(key){
          var optionPath = 'nav.' + key;
          var value      = this.get(optionPath);

          if (value) {
            if(Ember.typeOf(value) === 'function') {
              value = value.call(this, model);
            }

            ctrl.set(optionPath, value);
          }
        }, this);
      },

      _setNavActions: function() {
        var ctrl = this.get('_navController');

        Ember.A(['leftButton', 'rightButton']).forEach(function(button) {
          var actionPath = 'nav.' + button + '.action';

          var action = this.get(actionPath);
          if (action) {
            ctrl.set(actionPath, Ember.run.bind(this, action));
          }
        }, this);
      },

      actions: {
        willTransition: function() {
          this.get('_navController').send('resetNavBar');
          return this._super.apply(this, arguments);
        }
      }
    });
  });
;define("ember-cli-cordova/utils/defer-readiness", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = function(app) {
      app.deferReadiness();

      return new Ember.RSVP.Promise(function(resolve, reject) {
        document.addEventListener('deviceready', resolve, false);

        Ember.run.later(function() {
          reject(new Error('We are waiting for cordova to be ready but it hasn\'t started after 5 seconds. Usually that\'s because you\'re in the browser. If you need to work in the browser, please start `ember serve` without the proxy.'));
        }, 5000);
      });
    }
  });
;define("ember-cli-cordova/utils/start-proxy-server", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /* globals cordova */
    var Ember = __dependency1__["default"];

    var loadTries = 0;
    __exports__["default"] = function startProxyServer(location) {
      location = location.replace(/^file.*\/Documents/, '../../Documents');

      return new Ember.RSVP.Promise(function(resolve, reject) {
        var httpd       = cordova && cordova.plugins && cordova.plugins.CorHttpd;
        var port        = 4300;

        var retry = function () {
          loadTries++;
          if (loadTries > 10) {
            reject(new Error('Giving up on starting the server.'));
          } else {
            console.log('Retrying to to start the server.');
            startProxyServer(location).then(resolve, reject);
          }
        };

        httpd.getURL(function(url) {
          if (url.length > 0) {
            resolve(url);
          } else {
            httpd.startServer({
              'www_root' : location,
              'port' : port,
              'cordovajs_root': cordova.file.applicationDirectory + 'www/'
            }, function(url) {
              console.log('server started..', url);
              resolve(url);
            }, retry);
          }
        }, retry);
      });
    }
  });
;define("ember-cli-cordova", ["ember-cli-cordova/index","exports"], function(__index__, __exports__) {
  "use strict";
  Object.keys(__index__).forEach(function(key){
    __exports__[key] = __index__[key];
  });
});
